import React from 'react';
import omit from 'lodash/omit';
import cx from 'classnames';
import t from 'tcomb';
import { props } from 'tcomb-react';
import { skinnable, pure } from 'revenge';
import Table from '../../../../../../../src/table/Table';
import './tableWrapper.scss';

export { checkPropsInvariants } from '../../../../../../../src/table/Table';

const TOP = -1;
const DOWN = 1;
const LEFT = -1;
const RIGHT = 1;

@pure
@skinnable()
@props({
  onColumnResizeEndCallback: t.maybe(t.Function),
  bindShortcuts: t.maybe(t.Boolean)
}, { strict: false })
export default class TableWrapper extends React.Component {

  static defaultProps = {
    onColumnResizeEndCallback: () => {},
    bindShortcuts: false
  };

  selectAdjacentRow = (direction) => () => {
    const { selectedRows, selectionType, onRowSelect, onRowsSelect, rowsCount } = this.props;
    if (!direction || selectedRows.length > 1) {
      return;
    }
    const currentSelectedRow = t.Number.is(selectedRows[0]) ? selectedRows[0] : -1;
    const rowIndexToSelect = currentSelectedRow + direction;
    if (rowIndexToSelect < 0 || rowIndexToSelect >= rowsCount) {
      return;
    }
    const multipleSelectionEnabled = selectionType === 'multi';
    if (multipleSelectionEnabled) {
      onRowsSelect && onRowsSelect([rowIndexToSelect]);
    } else {
      onRowSelect && onRowSelect(rowIndexToSelect);
    }
  };

  selectAdjacentColumn = (direction) => () => {
    const { selectedColumns = [], columns, onColumnSelect } = this.props;
    if (!direction || !onColumnSelect) {
      return;
    }
    const currentSelectedColumnIndex = columns.map(c => c.key).indexOf(selectedColumns[0]);
    const columnIndexToSelect = currentSelectedColumnIndex + direction;
    if (columnIndexToSelect < 0 || columnIndexToSelect >= columns.length) {
      return;
    }
    const _columnToSelect = columns[columnIndexToSelect];
    const columnToSelect = _columnToSelect.key;
    onColumnSelect(columnToSelect);
  };

  getLocals() {
    const { bindShortcuts, ...props } = this.props;
    return {
      ...omit(props, ['onColumnSelect']),
      className: cx('table-wrapper', this.props.className),
      shortcutsProps: {
        bind: bindShortcuts,
        shortcutsMap: {
          left: {
            description: ('TableWrapper.selectAdjacentLeftColumn'),
            action: this.selectAdjacentColumn(LEFT)
          },
          right: {
            description: ('TableWrapper.selectAdjacentRightRow'),
            action: this.selectAdjacentColumn(RIGHT)
          },
          up: {
            description: ('TableWrapper.selectAdjacentTopRow'),
            action: this.selectAdjacentRow(TOP)
          },
          down: {
            description: ('TableWrapper.selectAdjacentBottomRow'),
            action: this.selectAdjacentRow(DOWN)
          }
        }
      }
    };
  }

  template({ shortcutsProps, ...locals }) {
    return (
      <Table {...locals} />
    );
  }
}
