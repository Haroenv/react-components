import React from 'react';
import t from 'tcomb';
import { props } from 'tcomb-react';
import { pure, skinnable } from 'revenge';
import BuildoTextOverflow from '../../../../../../../src/text-overflow';
import Tooltip from '../Tooltip/Tooltip';

@skinnable()
@pure
@props({
  label: t.maybe(t.union([t.String, t.Number])),
  popover: t.maybe(t.Object),
  lazy: t.maybe(t.Boolean),
  id: t.maybe(t.String),
  className: t.maybe(t.String),
  style: t.maybe(t.Object)
})
export default class TextOverflow extends React.Component {

  static defaultProps = {
    popover: {},
    lazy: true
  };

  getLocals() {
    const { label: _label, popover, className, style, id, lazy } = this.props;
    const label = t.Nil.is(_label) ? '' : String(_label);
    const tooltipStyle = { width: '100%' };
    const popoverProps = { position: 'top', ...popover };
    return {
      className, style, id,
      label,
      lazy,
      tooltipProps: {
        className,
        style: tooltipStyle,
        popover: {
          ...popoverProps,
          content: label
        }
      }
    };
  }

  template({ label, className, style, id, tooltipProps, lazy }) {
    return (
      <BuildoTextOverflow {...{ className, label, style, id, lazy }}>
        {(self, isOpen) => (
          <Tooltip {...tooltipProps} popover={{ ...tooltipProps.popover, isOpen }}>
            {self}
          </Tooltip>
        )}
      </BuildoTextOverflow>
    );
  }

}
